<!DOCTYPE html>
<html>
<head>
  <title>User Playlist</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#19e68c" />
  <meta name="description" content="Simple web application exploring user playlist in Spotify" />
  <meta property="og:description" content="Simple web application exploring user playlist in Spotify">
  <link rel="stylesheet" href="https://csstools.github.io/sanitize.css/latest/sanitize.css">
  <link rel="stylesheet" href="/style.css">
</head>

<body class="center">
  <main>
    <header>
      <h1 data-label="user">
        {{title}}
      </h1>
      <h3>
        <a href="https://open.spotify.com/user/{{title}}" data-label="open-spotify">https://open.spotify.com/user/{{title}}</a>
      </h3>
    </header>

    <div id="items">

      <div class="card" id="playlist-template" data-index="-1">
        <div class="flex">
          <div class="image">
            <img data-api="images[0].url" data-label="src" width="80px" height="80px">
          </div>
          <div class="container">
            <h3 class="playlist-name">
              <a href="" data-api="external_urls.spotify" data-label="href" target="_blank">
               <span data-api="name"></span>
              </a>
            </h3>
            <div data-api="description"></div>
          </div>
        </div>
        <label data-api="id" hidden></label>
      </div>

    </div>

  </main>

  <script>
    var url = "/api/user/{{title}}";

    function getLocalData(key) {
      return JSON.parse(localStorage.getItem(key));
    }

    function $get(query) {
      return document.getElementById(query);
    }

    function flattenObject(data) {
      var result = {};
      function recurse(cur, prop) {
        if (Object(cur) !== cur) {
          result[prop] = cur;
        } else if (Array.isArray(cur)) {
          for (var i = 0, l = cur.length; i < l; i++)
            recurse(cur[i], prop + "[" + i + "]");
          if (l == 0)
            result[prop] = [];
        } else {
          var isEmpty = true;
          for (var p in cur) {
            isEmpty = false;
            recurse(cur[p], prop ? prop + "." + p : p);
          }
          if (isEmpty && prop)
            result[prop] = {};
        }
      }
      recurse(data, "");
      return result;
    }

    function cloneHTML(itemData, index = 0) {

      const flatData = flattenObject(itemData)

      var clone = document.querySelector('#items .card[data-index="-1"]').cloneNode(true)
      clone.id = 'playlist-' + itemData.id,
      clone.dataset.index = index
      clone.querySelectorAll('[data-api]').forEach(e => {
        e[e.dataset.label || 'textContent'] = flatData[e.dataset.api]
      })

      return clone

    }

    function fillPage(data) {

      const div = Object.assign(document.createElement("a"), {
        href: url,
        textContent: url
      });

      document.body.appendChild(div);
      data.items.forEach((e, i) => {

        $get("items").appendChild(cloneHTML(e, i));
      })
    }

    function dataManager(userUrl, cb) {
      var dat = getLocalData(userUrl);

      if (!localStorage.getItem(userUrl)) {
        fetch(userUrl)
          .then(response => response.json())
          .then(data => {
            dat = data.body;
          fillPage(dat)
            console.log("fetched", data);
            localStorage.setItem(
              userUrl,
              JSON.stringify({
                ...data.body,
                fetched: new Date().toLocaleString()
              })
            )
          })
      }

      cb(dat);

    }

    dataManager(url, fillPage);
  </script>
</body>

</html>